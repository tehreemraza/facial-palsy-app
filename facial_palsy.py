# -*- coding: utf-8 -*-
"""facial_palsy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HlfW6whDRl0i6PRgKfiryWfGunTCCftO
"""

!pip install mediapipe opencv-python numpy pandas matplotlib tqdm

import cv2
import mediapipe as mp
import numpy as np
import pandas as pd
import os
from tqdm import tqdm
import matplotlib.pyplot as plt

!pip install reportlab --quiet

mp_face_mesh = mp.solutions.face_mesh

# Eye opening (vertical distance between eyelids)
def measure_eye_openness(landmarks, image_height):
    upper = landmarks[159]
    lower = landmarks[145]
    return abs((upper.y - lower.y)) * image_height

# Mouth asymmetry (horizontal distance difference between corners)
def measure_mouth_asymmetry(landmarks, image_width):
    left = landmarks[61]  # left corner
    right = landmarks[291] # right corner
    center = (landmarks[0].x * image_width) # nose tip center reference
    left_dist = abs(left.x*image_width - center)
    right_dist = abs(right.x*image_width - center)
    return abs(left_dist - right_dist)  # difference between left and right corner

# Eyebrow raise (vertical distance eyebrow to eye)
def measure_eyebrow_raise(landmarks, image_height):
    left_eyebrow = landmarks[105]  # left eyebrow midpoint
    left_eye_top = landmarks[159]
    return abs((left_eyebrow.y - left_eye_top.y)) * image_height

def process_folder(folder_path):
    eye_openings = []

    with mp_face_mesh.FaceMesh(static_image_mode=True, max_num_faces=1, refine_landmarks=True) as face_mesh:
        for img_file in tqdm(os.listdir(folder_path)):
            img_path = os.path.join(folder_path, img_file)
            image = cv2.imread(img_path)
            if image is None:
                continue

            rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
            output = face_mesh.process(rgb)

            if output.multi_face_landmarks:
                landmarks = output.multi_face_landmarks[0].landmark
                eye_openings.append(measure_eye_openness(landmarks, image.shape[0]))

    return eye_openings

import os

# 1️⃣ Path to your ZIP file (adjust if needed)
zip_path = "/content/moderate eye (2).zip"

# 2️⃣ Folder to extract into (avoid spaces for convenience)
extract_path = "/content/moderate_eye_images"
os.makedirs(extract_path, exist_ok=True)

# 3️⃣ Unzip the file (system unzip handles spaces)
!unzip -q "{zip_path}" -d "{extract_path}"

# 4️⃣ Recursively list all extracted files
for root, dirs, files in os.walk(extract_path):
    for file in files:
        print(os.path.join(root, file))

import os
from PIL import Image
import matplotlib.pyplot as plt

# Folder containing the images
image_folder = "/content/moderate_eye_images/moderate eye"

# Collect all image files including .bmp
images = [os.path.join(image_folder, f)
          for f in os.listdir(image_folder)
          if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))]

# Sort for consistent order
images.sort()

# Check how many images were found
print(f"Found {len(images)} images")
print("First two image paths:", images[:2])

# Display first two images
if images:
    plt.figure(figsize=(10,5))
    for i in range(min(2, len(images))):
        img = Image.open(images[i])
        plt.subplot(1, 2, i+1)
        plt.imshow(img)
        plt.axis('off')
        plt.title(os.path.basename(images[i]))
    plt.show()
else:
    print("No images found!")

import os
from PIL import Image
import matplotlib.pyplot as plt

# Folder containing the images
image_folder = "/content/moderate_eye_images/moderate eye"

# Collect all image files including .bmp
images = [os.path.join(image_folder, f)
          for f in os.listdir(image_folder)
          if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))]

# Sort for consistent order
images.sort()

# Check how many images were found
print(f"Found {len(images)} images")
print("First two image paths:", images[:2])

# Display first two images
if images:
    plt.figure(figsize=(10,5))
    for i in range(min(2, len(images))):
        img = Image.open(images[i])
        plt.subplot(1, 2, i+1)
        plt.imshow(img)
        plt.axis('off')
        plt.title(os.path.basename(images[i]))
    plt.show()
else:
    print("No images found!")

import os
from PIL import Image
import numpy as np

def process_folder(folder_path):
    """
    Example function to process all images in a folder.
    Returns a list of dummy "eye openness" values (replace with your actual logic).
    """
    values = []
    for file in os.listdir(folder_path):
        if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
            img_path = os.path.join(folder_path, file)
            img = Image.open(img_path)

            # Example processing: compute average pixel intensity
            img_gray = img.convert('L')  # convert to grayscale
            arr = np.array(img_gray)
            avg = np.mean(arr)
            values.append(avg)
    return values

# Now you can call it
moderate_path = "/content/moderate_eye_images/moderate eye"  # your actual folder
eye_moderate = process_folder(moderate_path)
print("Eye openness values:", eye_moderate)
print("Average eye opening:", np.mean(eye_moderate))

plt.figure(figsize=(10,5))
plt.plot(eye_moderate, marker='o')
plt.title("Eye Opening per Image (Moderate)")
plt.ylabel("Eye Openness (pixels)")
plt.xlabel("Image Index")
plt.show()

from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
import numpy as np

pdf_file = "/content/eye_report_moderate.pdf"
c = canvas.Canvas(pdf_file, pagesize=letter)
c.drawString(50, 750, "Facial Palsy Eye Measurement Report (Moderate Folder)")
c.drawString(50, 730, f"Number of images analyzed: {len(eye_moderate)}")
c.drawString(50, 710, f"Average eye opening: {np.mean(eye_moderate):.2f}")
c.save()
print("PDF report generated at:", pdf_file)